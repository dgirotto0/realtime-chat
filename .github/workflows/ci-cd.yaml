name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  # Seu registry, por exemplo Docker Hub
  REGISTRY: docker.io
  # Nome das imagens (sem tag)
  IMAGE_NAME_BACKEND: dvgirotto/my-anonymous-chat-backend
  IMAGE_NAME_FRONTEND: dvgirotto/my-anonymous-chat-frontend

jobs:
  build-and-push-backend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout do Código
        uses: actions/checkout@v3

      - name: Configurar Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login no Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Build e Push do Backend
        uses: docker/build-push-action@v3
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}:latest
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}:${{ github.sha }}

  build-and-push-frontend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout do Código
        uses: actions/checkout@v3

      - name: Configurar Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login no Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Build e Push do Frontend
        uses: docker/build-push-action@v3
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}:latest
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}:${{ github.sha }}

  deploy:
    # Garante que só roda depois que as imagens foram publicadas
    needs: [build-and-push-backend, build-and-push-frontend]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout do Código
        uses: actions/checkout@v3

      - name: Configurar Kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Configurar Kubeconfig
        # Aqui se assume que você guardou o conteúdo do kubeconfig em
        # secrets.KUBECONFIG (formato YAML completo)
        run: |
          echo "${{ secrets.KUBECONFIG }}" > $HOME/.kube/config

      - name: Atualizar Manifests com Nova Imagem
        # Substitui 'IMAGE_BACKEND' e 'IMAGE_FRONTEND' nos YAML para as tags com SHA
        run: |
          sed -i "s|IMAGE_BACKEND|${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}:${{ github.sha }}|g" k8s/backend-deployment.yaml
          sed -i "s|IMAGE_FRONTEND|${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}:${{ github.sha }}|g" k8s/frontend-deployment.yaml

      - name: Aplicar Manifests no Kubernetes
        run: |
          kubectl apply -f k8s/

      - name: Forçar Rollout do Backend e Frontend
        run: |
          kubectl rollout restart deployment/backend-deployment
          kubectl rollout restart deployment/frontend-deployment

      - name: Aguardar Rollout
        run: |
          kubectl rollout status deployment/backend-deployment
          kubectl rollout status deployment/frontend-deployment
